<?php
// $Id$

/**
 * Implements hook_menu().
 */
function search_api_page_menu() {
  $pre = 'admin/config/search/search_api/page';
  $items[$pre] = array(
    'title' => 'Search pages',
    'description' => 'Create and configure search pages.',
    'page callback' => 'search_api_page_admin_overview',
    'access arguments' => array('administer search_api'),
    'file' => 'search_api_page.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items[$pre . '/add'] = array(
    'title' => 'Add search page',
    'description' => 'Add a new search page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_page_admin_add'),
    'access arguments' => array('administer search_api'),
    'file' => 'search_api_page.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items[$pre . '/%search_api_page'] = array(
    'title' => 'Edit search page',
    'description' => 'Configure or delete a search page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_page_admin_edit', 5),
    'access arguments' => array('administer search_api'),
    'file' => 'search_api_page.admin.inc',
  );

  foreach (entity_load('search_api_page', FALSE, array('enabled' => 1), TRUE) as $page) {
    $items[$page->path] = array(
      'title' => $page->name,
      'description' => $page->description ? $page->description : $page->name,
      'page callback' => 'search_api_page_view',
      'page arguments' => array((string) $page->id),
      'access arguments' => array('access search_api_page'),
      'file' => 'search_api_page.pages.inc',
      'type' => MENU_SUGGESTED_ITEM,
    );
  }

  return $items;
}

/**
 * Implements hook_block_info().
 */
function search_api_page_block_info() {
  // @todo Implement.
  return array();
}

/**
 * Implements hook_block_view().
 */
function search_api_page_block_view() {
  // @todo Implement.
  return array();
}

/**
 * Implements hook_theme().
 */
function search_api_page_theme() {
  $themes['search_api_page_results'] = array(
    'variables' => array(
      'index' => NULL,
      'results' => array('result count' => 0),
      'entities' => array(),
      'keys' => '',
    ),
    'file' => 'search_api_page.pages.inc',
  );
  $themes['search_api_page_result'] = array(
    'variables' => array(
      'index' => NULL,
      'result' => NULL,
      'entity' => NULL,
      'keys' => '',
    ),
    'file' => 'search_api_page.pages.inc',
  );

  return $themes;
}

/**
 * Implements hook_permission().
 */
function search_api_page_permission() {
  return array(
    'access search_api_page' => array(
      'title' => t('Access search pages'),
      'description' => t('Execute searches using the Search pages module.'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function search_api_page_entity_info() {
  $info['search_api_page'] = array(
    'label' => t('Search page'),
    'base table' => 'search_api_page',
    'uri callback' => 'search_api_page_url',
    'entity keys' => array(
      'id' => 'id',
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function search_api_page_entity_property_info() {
  $info['search_api_server']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a search page.'),
    ),
    'index_id' => array(
      'label' => t('Index ID'),
      'type' => 'integer',
      'description' => t('The ID of the index this search page uses.'),
    ),
    'index' => array(
      'label' => t('Index'),
      'type' => 'search_api_index',
      'description' => t('The index this search page uses.'),
      'getter callback' => 'search_api_page_get_index',
    ),
    'name' => array(
      'label' => t('Name'),
      'type' => 'text',
      'description' => t('The displayed name for a search page.'),
      'required' => TRUE,
    ),
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'description' => t('The displayed description for a search page.'),
      'sanitize' => 'filter_xss',
    ),
    'enabled' => array(
      'label' => t('Enabled'),
      'type' => 'boolean',
      'description' => t('A flag indicating whether the search page is enabled.'),
    ),
  );

  return $info;
}

/**
 * Implements hook_search_api_index_update().
 */
function search_api_page_search_api_index_update(SearchApiIndex $index, $op = 'edit') {
  if ($op == 'disable') {
    foreach (entity_load('search_api_page', FALSE, array('index_id' => $index->id, 'enabled' => 1)) as $page) {
      search_api_page_edit($page->id, array('enabled' => 0));
    }
  }
}

/**
 * Implements hook_search_api_index_delete().
 */
function search_api_page_search_api_index_delete(SearchApiIndex $index) {
  foreach (entity_load('search_api_page', FALSE, array('index_id' => $index->id, 'enabled' => 1)) as $page) {
    search_api_page_delete($page->id);
  }
}

/**
 * Entity URI callback.
 */
function search_api_page_url(stdClass $page) {
  return array('path' => $page->path);
}

/**
 * Entity property getter callback.
 */
function search_api_page_get_index(stdClass $page) {
  return search_api_index_load($page->index_id);
}

/**
 * Loads a search_api_page object.
 *
 * @param $id
 *   The page's ID.
 */
function search_api_page_load($id, $reset = FALSE) {
  $ret = entity_load('search_api_page', array($id), array(), $reset);
  if (!$ret) {
    return NULL;
  }
  $ret = array_shift($ret);
  if (is_string($ret->options)) {
    $ret->options = unserialize($ret->options);
  }
  return $ret;
}

/**
 * Inserts a new search page into the database.
 *
 * @param array $values
 *   An array containing the values to be inserted.
 *
 * @return
 *   The newly inserted page's id, or FALSE on error.
 */
function search_api_page_insert(array $values) {
  foreach (array('name', 'index_id', 'path') as $var) {
    if (!isset($values[$var])) {
      throw new SearchApiException(t('Property !field has to be set for new search page!', array('!field' => $var)));
    }
  }
  if (empty($values['description'])) {
    $values['description'] = NULL;
  }
  if (empty($values['options'])) {
    $values['options'] = array();
  }
  $fields = array(
    'name' => $values['name'],
    'description' => $values['description'],
    'enabled' => empty($values['enabled']) ? 0 : 1,
    'index_id' => $values['index_id'],
    'path' => $values['path'],
    'options' => serialize($values['options']),
  );
  if (isset($values['id'])) {
    $fields['id'] = $values['id'];
  }

  $id = db_insert('search_api_page')->fields($fields)->execute();

  if (!isset($fields['id'])) {
    $fields['id'] = $id;
  }
  else {
    $id = $fields['id'];
  }

  menu_rebuild();
  menu_cache_clear_all();
  module_invoke_all('entity_insert', (object) $fields, 'search_api_page');

  return $id;
}

/**
 * Changes a page's settings.
 *
 * @param $id
 *   The edited page's ID.
 * @param array $fields
 *   The new field values to set.
 *
 * @return
 *   1 if fields were changed, 0 if the fields already had the desired values.
 */
function search_api_page_edit($id, array $fields) {
  $page = search_api_page_load($id, TRUE);
  $changeable = array('name' => 1, 'description' => 1, 'path' => 1, 'options' => 1, 'enabled' => 1);
  foreach ($fields as $field => $value) {
    if (!isset($changeable[$field]) || $value === $page->$field) {
      unset($fields[$field]);
    }
  }
  // If there are no new values, just return 0.
  if (empty($fields)) {
    return 0;
  }

  if (isset($fields['options'])) {
    $fields['options'] = serialize($fields['options']);
  }

  $ret = db_update('search_api_page')
    ->fields($fields)
    ->condition('id', $page->id)
    ->execute();

  if ($ret) {
    $page = search_api_page_load($id, TRUE);
    if (isset($fields['path'])) {
      menu_rebuild();
      menu_cache_clear_all();
    }
    module_invoke_all('entity_update', $page, 'search_api_page');
  }

  return $ret;
}

/**
 * Deletes a search page.
 *
 * @param $id
 *   The ID of the search page to delete.
 *
 * @return
 *   TRUE on success, FALSE on failure.
 */
function search_api_page_delete($id) {
  $page = search_api_page_load($id, TRUE);

  $ret = db_delete('search_api_page')
    ->condition('id', $page->id)
    ->execute();

  if (!$ret) {
    return FALSE;
  }

  menu_rebuild();
  menu_cache_clear_all();
  module_invoke_all('entity_delete', $page, 'search_api_page');

  return TRUE;
}
